// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  username    String   @unique
  avatar      String?
  cover       String?
  name        String?
  lastname    String?
  description String?
  city        String?
  school      String?
  work        String?
  website     String?
  createdAt   DateTime @default(now())

  posts   Post[]
  likes   Like[]
  Comment Comment[]

  followers  Follower[] @relation("UserFollowers")
  followings Follower[] @relation("UserFollowings")

  followRequestsSent     FollowRequest[] @relation("FollowRequestsSent")
  followRequestsReceived FollowRequest[] @relation("FollowRequestsReceived")

  blockSent     Block[] @relation("BlockSent")
  blockReceived Block[] @relation("BlockReceived")

  stories Storey[]
}

model Post {
  id        Int       @id @default(autoincrement())
  desc      String
  img       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  Comments  Comment[]
  likes     Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int

  likes Like[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  Post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?
}

model Follower {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  follower   User?   @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String?

  following   User?   @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String?
}

model FollowRequest {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  sender   User?   @relation("FollowRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)
  senderId String?

  receiver   User?   @relation("FollowRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String?

  @@unique([senderId, receiverId])
}

model Block {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  blocker   User?   @relation("BlockSent", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String?

  blocked   User?   @relation("BlockReceived", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String?

  @@unique([blockedId, blockerId])
}

model Storey {
  id        Int      @id @default(autoincrement())
  img       String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
}
